{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gedepaulas/login-exercise/blob/main/the-office-crawler-pnl\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BqtIy3rbs-SP"
      },
      "source": [
        "# Construção de Web Crawler \n",
        "\n",
        "Serão extraídos todos os episódios das 5ª temporada de The Office da sessão https://transcripts.foreverdreaming.org/viewforum.php?f=574 a fim de compreender o top 10 de frequência de aparição de personagens na temporada.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kkm8SKKk9IJ4"
      },
      "source": [
        "#instalando as bibliotecas (crawler)\n",
        "try:\n",
        "  import scrapy\n",
        "except:\n",
        "  !pip install scrapy\n",
        "  !pip install crochet"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# text cleaning ()\n",
        "import re\n",
        "import scrapy\n",
        "import logging\n",
        "from scrapy.crawler import CrawlerRunner\n",
        "# Reactor restart\n",
        "from crochet import setup, wait_for\n",
        "setup()"
      ],
      "metadata": {
        "id": "R62p-ZvlWiny"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fB9jntWrtvE5"
      },
      "source": [
        "class OfficeEpSpider(scrapy.Spider):\n",
        "    name = \"office_ep\"\n",
        "    start_urls = [\"https://transcripts.foreverdreaming.org/viewforum.php?f=574\"]\n",
        "    custom_settings = {\n",
        "        'LOG_LEVEL': 'DEBUG',\n",
        "        'FEEDS': {\n",
        "            'office.csv': {\n",
        "                'format': 'csv',\n",
        "                'overwrite': True\n",
        "            }\n",
        "        },              \n",
        "        'USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', \n",
        "        'REQUEST_FINGERPRINTER_IMPLEMENTATION': '2.7'\n",
        " }\n",
        "    def parse(self, response):\n",
        "        episode_links = response.css(\"a.topictitle::attr(href)\").getall()\n",
        "        for link in episode_links:\n",
        "            yield scrapy.Request(url=response.urljoin(link), callback=self.parse_episode)\n",
        "\n",
        "        next_page = response.css(\"div.pagination a::attr(href)\").get()\n",
        "        if next_page is not None:\n",
        "            yield scrapy.Request(url=response.urljoin(next_page), callback=self.parse)\n",
        "\n",
        "    def parse_episode(self, response):\n",
        "        title = response.css(\"h3.first a::text\").get().strip()\n",
        "        if \"05x\" in title:\n",
        "          script = response.css(\"div.postbody div\")[0].xpath(\"string()\").get().strip()\n",
        "        yield {\n",
        "            \"title\": title,\n",
        "            \"script\": script\n",
        "            }"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zyL6Y9jMwv4x"
      },
      "source": [
        "#inicia o crawler\n",
        "crawler = CrawlerRunner()\n",
        "crawler.crawl(OfficeEpSpider)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#instalando as bibliotecas (pnl)\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from nltk import FreqDist\n",
        "from collections import Counter\n",
        "import numpy as np\n",
        "from wordcloud import WordCloud, STOPWORDS\n",
        "import string"
      ],
      "metadata": {
        "id": "jZ2Qgtd83zc0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#criando um df com o csv\n",
        "words_df = pd.read_csv('office.csv', encoding='utf-8')\n",
        "display(words_df)"
      ],
      "metadata": {
        "id": "OzGi1Dkaf-iF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#nuvem de palavras dos scripts\n",
        "original_text = ' '.join(words_df['script'])\n",
        "\n",
        "\n",
        "wordcloud2 = WordCloud(collocations=False, normalize_plurals=False, stopwords=None, width=600, height=300, background_color='white', max_words=50).generate(original_text)                       \n",
        "plt.figure(figsize = (18, 18), facecolor = 'White') \n",
        "plt.imshow(wordcloud2)\n",
        "plt.axis(\"off\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "-e3L9Oo0mHII"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Pré-tratamento de palavras da coluna \"script\""
      ],
      "metadata": {
        "id": "Bav26zVl4Ydt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#baixa as palavras de parada em inglês e o tokenizer punkt\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "tokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\n",
        "\n",
        "#converte tudo para minúsculo\n",
        "words_df['script'] = words_df['script'].str.lower()\n",
        "\n",
        "#tokeniza as palavras\n",
        "words_df['script'] = words_df['script'].apply(tokenizer.tokenize)\n",
        "\n",
        "#remove as palavras de parada\n",
        "words_df['script'] = words_df['script'].apply(lambda x: [word for word in x if word not in stop_words])\n",
        "\n",
        "#transforma a lista de palavras em uma série de palavras\n",
        "words_df = words_df.explode('script')\n",
        "\n",
        "#conta a frequência das palavras\n",
        "word_counts = Counter(words_df['script'])\n",
        "\n",
        "#ordenação de frequência\n",
        "order_ung = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "display(order_ung)\n",
        "\n"
      ],
      "metadata": {
        "id": "12ZEEP_2t6Xv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualizando em um df\n",
        "pre_treated_text = pd.DataFrame.from_dict(order_ung)\n",
        "pre_treated_text.head(50)\n"
      ],
      "metadata": {
        "id": "Wg437Lg1zfBO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Limpeza de palavras menos relevantes para a análise"
      ],
      "metadata": {
        "id": "syK6XXGtk_Lb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ignorewords = ['oh', 'know', 'dont', 'yeah', 'okay', 'like', 'get', 'right', 'na', 'well', 'hey',\n",
        "               'going', 'thats', 'go', 'youre', 'good', 'want', 'think', 'really', 'one', 'back', 'gon',\n",
        "               'come', 'would', 'see', 'ok', 'yes', 'got', 'say', 'look', 'need', 'uh', 'time', 'phone', \n",
        "               'will', 'could', 'cant', 'little', 'make', 'lets', 'way', 'take', 'god', 'great', 'ill', 'something',\n",
        "               'man', 'guys', 'thank', 'us', 'people', 'new', 'sorry', 'work', 'everyone', 'give', 'please', 'um', \n",
        "               'hes', 'day', 'mean', 'didnt', 'tell', 'even', 'company', 'call', 'whats', 'thing', \t'gonna', 'let', \n",
        "               ]\n",
        "\n",
        "def filter_words(pre_treated_text):\n",
        "   return ' '.join([word for word in pre_treated_text.split() if word.lower() not in ignorewords])\n",
        "\n",
        "pre_treated_text[0] = pre_treated_text[0].apply(lambda x: filter_words(x))\n",
        "\n",
        "clean_df = pd.DataFrame.from_dict(pre_treated_text)\n",
        "display(clean_df.head(10))\n"
      ],
      "metadata": {
        "id": "4729OWodnhC1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "b31342c1-c9d3-48b2-89cd-fc430092cf1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         0     1\n",
              "0  michael  2747\n",
              "1   dwight  1402\n",
              "2      jim  1115\n",
              "3      pam   947\n",
              "4     andy   620\n",
              "5            619\n",
              "6            545\n",
              "7            428\n",
              "8            420\n",
              "9            392"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ed1f695-9181-47d7-8cae-eb1c53aa150e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>michael</td>\n",
              "      <td>2747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dwight</td>\n",
              "      <td>1402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>jim</td>\n",
              "      <td>1115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>pam</td>\n",
              "      <td>947</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>andy</td>\n",
              "      <td>620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td></td>\n",
              "      <td>619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td></td>\n",
              "      <td>545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td></td>\n",
              "      <td>428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td></td>\n",
              "      <td>420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td></td>\n",
              "      <td>392</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ed1f695-9181-47d7-8cae-eb1c53aa150e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4ed1f695-9181-47d7-8cae-eb1c53aa150e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4ed1f695-9181-47d7-8cae-eb1c53aa150e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#removendo linhas vazias\n",
        "df_remove = clean_df.loc[(clean_df[0] == '')]\n",
        "final_df = clean_df.drop(df_remove.index)\n",
        "display(final_df.head(10))"
      ],
      "metadata": {
        "id": "hiU2CzzGkkkk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "75d38a02-3c3f-4300-a6b1-5807d055c381"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          0     1\n",
              "0   michael  2747\n",
              "1    dwight  1402\n",
              "2       jim  1115\n",
              "3       pam   947\n",
              "4      andy   620\n",
              "12    holly   358\n",
              "14    kevin   332\n",
              "17   angela   306\n",
              "20    oscar   294\n",
              "22  charles   289"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4aea066a-8ff9-4e8f-862c-e5a6bca14fc9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>michael</td>\n",
              "      <td>2747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dwight</td>\n",
              "      <td>1402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>jim</td>\n",
              "      <td>1115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>pam</td>\n",
              "      <td>947</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>andy</td>\n",
              "      <td>620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>holly</td>\n",
              "      <td>358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>kevin</td>\n",
              "      <td>332</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>angela</td>\n",
              "      <td>306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>oscar</td>\n",
              "      <td>294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>charles</td>\n",
              "      <td>289</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4aea066a-8ff9-4e8f-862c-e5a6bca14fc9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4aea066a-8ff9-4e8f-862c-e5a6bca14fc9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4aea066a-8ff9-4e8f-862c-e5a6bca14fc9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#seleciona as 10 primeiras linhas do dataframe\n",
        "first_10 = final_df.head(10)\n",
        "\n",
        "#separa as palavras da coluna 0 e frequências da coluna 1\n",
        "personagens = first_10[0]\n",
        "frequencias = first_10[1]\n",
        "\n",
        "#cria o histograma com os personagens e suas frequências\n",
        "plt.bar(personagens, frequencias)\n",
        "plt.xlabel('Personagem')\n",
        "plt.ylabel('Frequência')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nqhhG39i0Ce-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}